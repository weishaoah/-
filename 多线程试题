1. synchronized关键字
作用：使用其修饰一个对象、方法或者同步代码块，给其添加一个同步锁，使得在同一时间只有一个线程可以访问这个对象，是保持线程间同步通信的关键字。
作用对象：对象、方法或者同步代码块
注意点：（1）当synchronized修饰一个同步代码块时，其就获得了该对象的同步锁，所以当你访问一个同步代码块时，其内部的其他同步代码块也同样被阻塞
       （2）当上述情况时，其内部的非同步代码块可以访问。
       （3）当synchronized修饰class或者该类的静态方法时，获取的都是Class锁。
原理：（1）synchronized修饰同步代码块时，通过反编译方法，可以发现：每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，
          线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置
          为1，该线程即为monitor的所有者。2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1. 3.如果其他线程已经占用了
          monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。当监视器的进入数为0时，则退出monitor
          （执行monitorexit指令）。
      （2）synchronized修饰方法时，常量池中多了ACC_SYNCHRONIZED标示符，JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将
          会检查方法的 ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完
          后再释放monitor。
优化：synchronized是通过对象内部的监视器来实现的，而监视器则依赖于操作系统底层的Mutex Lock实现。故线程的切换需要从用户态转成核心态，成本高。
     故在后续的JDK1.6中，对其进行了优化，引入了"轻量级锁"和"偏向锁"。
     （1）轻量级锁：首先其并不是用来替代重量级锁，而是为了在没有多线程竞争时减少性能消耗。
     
