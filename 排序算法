1.排序：分为内部排序和外部排序，内部排序分为插入排序（直接插入和希尔排序）、选择排序（简单选择排序和堆排序）、交换排序（冒泡排序和快速排序）、归并排序和基数排序。
2.插入排序：
  （1）直接插入：先找到位置，然后移动其他位置。稳定排序
  （2）希尔排序：对待排序数组按照步长gap进行分组，然后将每组元素直接插入排序的方法进行排序；然后再将步长折半循环操作。
  推荐算法：
  public static void sort(int[] num) {
        int len = num.length;
        int h = 1;
        while(h<len/3) h = h*3+1;
        for(; h >= 1; h /= 3) {
            for(int i = 0; i < len-h; i+= h) {
                for(int j = i+h; j > 0; j -=h){
                    if(num[j] < num[j-h]){
                        int temp = num[j];
                        num[j] = num[j-h];
                        num[j-h] = temp;
                        System.out.println("sort: " + Arrays.toString (num));
                    }
                }
            }
        }
    }
    时间复杂度：nlogn，空间复杂度O（1）
3. 选择排序
   （1）简单选择：在未排序的序列中找到最小（大）元素存放到起始位置，然后再从剩余序列中继续寻找。
   public static void sort(int[] a) {
        for(int i = 0; i < a.length; i++) {
            int min = i;
            for(int j = i + 1; j < a.length; j++) {
                if(a[j] < a[min])
                    min = j;
            }
            if(min != i) {
                int temp = a[min];
                a[min] = a[i];
                a[i] = temp;
            }
        }
    }
    时间复杂度：最好O(n^2),最坏O(n^2)
    （2）堆排序：分为两步，一是建立堆，二是堆顶与堆的最后一个元素交换位置。
