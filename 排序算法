1.排序：分为内部排序和外部排序，内部排序分为插入排序（直接插入和希尔排序）、选择排序（简单选择排序和堆排序）、交换排序（冒泡排序和快速排序）、归并排序和基数排序。
2.插入排序：
  （1）直接插入：先找到位置，然后移动其他位置。稳定排序
  （2）希尔排序：对待排序数组按照步长gap进行分组，然后将每组元素直接插入排序的方法进行排序；然后再将步长折半循环操作。
  推荐算法：
  public static void sort(int[] num) {
        int len = num.length;
        int h = 1;
        while(h<len/3) h = h*3+1;
        for(; h >= 1; h /= 3) {
            for(int i = 0; i < len-h; i+= h) {
                for(int j = i+h; j > 0; j -=h){
                    if(num[j] < num[j-h]){
                        int temp = num[j];
                        num[j] = num[j-h];
                        num[j-h] = temp;
                        System.out.println("sort: " + Arrays.toString (num));
                    }
                }
            }
        }
    }
    时间复杂度：nlogn，空间复杂度O（1）
3. 选择排序
   （1）简单选择：在未排序的序列中找到最小（大）元素存放到起始位置，然后再从剩余序列中继续寻找。
   public static void sort(int[] a) {
        for(int i = 0; i < a.length; i++) {
            int min = i;
            for(int j = i + 1; j < a.length; j++) {
                if(a[j] < a[min])
                    min = j;
            }
            if(min != i) {
                int temp = a[min];
                a[min] = a[i];
                a[i] = temp;
            }
        }
    }
    时间复杂度：最好O(n^2),最坏O(n^2)
    （2）堆排序：分为两步，一是建立堆，二是堆顶与堆的最后一个元素交换位置。
    public class HeapSort {
    public static void sort(int[] arr) {
        //构建大顶堆
        for(int i = arr.length/2-1; i >=0; i--) {
            //从第一个非叶子节点从下至上调整结构
            adJustHeap(arr, i, arr.length);
        }

        for(int i = arr.length-1; i > 0; i--) {
            swap(arr, 0, i);
            adJustHeap ( arr, 0, i );
        }
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    public static void adJustHeap(int[] arr, int i, int length) {
        int temp = arr[i];
        for(int j = 2*i+1; j < length; j = j * 2+1) {
            if(j+1 < length && arr[j+1] > arr[j]){
                j++;
            }
            if(arr[j] > temp) {
                arr[i] = arr[j];
                i = j;
            } else{
                break;
            }
        }
        arr[i] = temp;
    }

    public static void main(String[] args) {
        int []arr = {9,8,7,6,5,4,3,2,1};
        sort(arr);
        System.out.println( Arrays.toString(arr));
    }
}
复杂度分析：
时间复杂度：O(nlogn)，不稳定排序。
空间复杂度：O(1)
4. 交换排序
（1）冒泡排序：
public void bubbleSort(int[] array) {
        int len = array.length;
        for(int i = 0; i < len; i++) {
            for(int j = 0; j < len - i -1; j++) {
                if(array[j] > array[j+1]){
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
    }
复杂度分析：最好O(n),最坏O(n^2),平均O(n^2)，空间复杂度O(1)
(2)快速排序：分治法。
基本方法：平均复杂度O(nlogn),最差O(n^2)
三数取中法：
public static void quickSort(int[] arr, int l, int r) {
        if(l < r) {
            dealPivot(arr, l, r);
            int pivot = r - 1;
            int i = l;
            int j = r - 1;
            while(true){
                while(arr[++i] < arr[pivot]);
                while(j > l && arr[--j] > arr[pivot]);
                if(i<j)
                    swap(arr, i,j);
                else
                    break;
            }
            if(i < r)
                swap(arr, i, r-1);
            quickSort ( arr, l, i-1 );
            quickSort ( arr, i+1, r );
        }
    }

    public static void dealPivot(int[] arr, int l, int r) {
        int mid = (l + r)/2;
        if(arr[l] > arr[mid])
            swap(arr, l, mid);
        if(arr[l] > arr[r])
            swap(arr, l, r);
        if(arr[mid] > arr[r])
            swap(arr, mid, r);
        swap(arr, mid, r-1);
    }

    private static void swap(int[] arr, int l, int r) {
        int temp = arr[l];
        arr[l] = arr[r];
        arr[r] = temp;
    }
   三向快速排序：应用于大量重复元素的数组。
public static void sortThreeWay(int[] a, int lo, int hi) {
    if (lo >= hi) {
        return;
    }
    int v = a[lo], lt = lo, i = lo + 1, gt = hi;
    while (i <= gt) {
        if (a[i] < v) {
            swap(a, i++, lt++);
        } else if (a[i] > v) {
            swap(a, i, gt--);
        } else {
            i++;
        }
    }
    sortThreeWay(a, lo, lt - 1);
    sortThreeWay(a, gt + 1, hi);
}

private static void swap(int[] a, int i, int j) {
    int t = a[i];
    a[i] = a[j];
    a[j] = t;
}
5. 归并排序
 public static void sort(int []arr){
        int []temp = new int[arr.length];//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间
        sort(arr,0,arr.length-1,temp);
    }
    private static void sort(int[] arr,int left,int right,int []temp){
        if(left<right){
            int mid = (left+right)/2;
            sort(arr,left,mid,temp);//左边归并排序，使得左子序列有序
            sort(arr,mid+1,right,temp);//右边归并排序，使得右子序列有序
            merge(arr,left,mid,right,temp);//将两个有序子数组合并操作
        }
    }
    private static void merge(int[] arr,int left,int mid,int right,int[] temp){
        int i = left;//左序列指针
        int j = mid+1;//右序列指针
        int t = 0;//临时数组指针
        while (i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                temp[t++] = arr[i++];
            }else {
                temp[t++] = arr[j++];
            }
        }
        while(i<=mid){//将左边剩余元素填充进temp中
            temp[t++] = arr[i++];
        }
        while(j<=right){//将右序列剩余元素填充进temp中
            temp[t++] = arr[j++];
        }
        t = 0;
        //将temp中的元素全部拷贝到原数组中
        while(left <= right){
            arr[left++] = temp[t++];
        }
    }
6. 性能比较


