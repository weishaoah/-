1. 原则：
单一性原则（SRP）：就一个类而言，应该仅有一个引起它变化的原因
开放-封闭原则：对扩展开放，对修改封闭
依赖倒转原则：（1）高层模块不应该依赖低层模块，两个都应该依赖抽象
             （2）抽象不应该依赖细节，细节应该依赖抽象
里氏替换原则：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是，在软件里面，把父类都替换成
             它的子类，程序的行为没有变化。（子类必须能够替换掉他们的父类型）
2. 工厂模式：为创建对象提供过渡接口
  （1）分类：简单工厂模式，工厂方法模式，抽象工厂模式
  （2）简单工厂模式：又称静态工厂方法模式，用于定义一个用于创建对象的接口。
       组成：工厂类角色，抽象产品角色，具体产品角色，返回类型是抽象产品类型，static修饰。
       //抽象产品角色
       public interface Car{
        public void drive();
       }
       //具体产品类
       public class Benz implements Car{
          public void drive(){
            syso("Driving Benz");
          }
       }
       public class BMW implements Car{
          public void drive(){
              ....
          }
       }
      //工厂类
      public class Driver{
          //工厂方法
          public static Car driveCar(String s) throws Exception{
              if(s.equals("Benz")
                  return new Benz();
              else if...
          }
      }
     //暴发户（用户）
     public class Magnage{
        main(){
            try{
                Car car = Driver.driveCar("Benz");
                car.drive();
                ...
            }
        }
     }
     (3)工厂方法模式：和简单工厂模式相比，它去掉了其工厂方法中的静态属性，使得它可以被子类继承。
     使用继承自抽象工厂角色的多个子类来代替简单工厂中的”上帝类“。
     (4)抽象工厂模式：给客户端提供一个接口，可以创建多个产品族中的产品对象而且使用抽象工厂模式还需要满足一下条件：
                    系统中有多个产品族，而系统一次只能消费其中一族产品
                    角色：抽象工厂，具体工厂，抽象产品，具体产品
3. 单例模式：保证一个类只有一个实例，并提供一个访问它的全局访问点。这里的单例，通常是指那些本质上具有唯一性的系统组件，如文件系统、资源管理器等。
   （1）饿汉式:在类的内部定义一个private内部实例
        public class Singleton{
            private static Singleton instance = new Singletion();
            //将构造函数设为私有
            private Singleton(){
            }
            //静态工厂方法
            public static Singleton getInstance(){
                return instance; 
            }
        }
        
     (2)懒汉式：防止多线程中产生多个实例
     public class Singleton{
        private static Singleton instance = null;
        //设置为私有的构造函数
        private Singleton(){}
        //静态工厂方法
        public static synchronized Singleton getInstance(){
            if(instance == null)
                instance = new Singleton();
            return instance;
        }
     }
     （3）双重检测：
     public class Singleton{
         private static Singleton instance = null;
         private Singleton(){}
         //双重检查
         public static Singleton getInstance(){
            if(instance == null){
                synchronized(this.class){
                    if(instance == null)
                        instance = new Singleton();
                }
            }
            return instance;
         }
     }
4. 代理模式：Proxy Pattern，定义是为其他对象提供一种代理以控制对这个对象的访问。代理对象是客户和目标之间的中介作用。按照代理创建的时期来分类的话，
            可以分为两种：静态代理和动态代理。
            代理模式的关键点是代理对象是对目标对象的扩展，并会调用目标对象。
   （1）静态代理：需要定义接口或者父类，被代理对象与代理对象一起实现相同的接口或者是继承相同父类。
  示例：
  //接口
  public interface IUserDao{
      void save();
  }
  //目标对象
  public class UserDao implements IUserDao {
      public void save(){
          syso("blabla");
      }
  }
  //代理对象
  public class UserDaoProxy implements IUserDao{
      //接收保存目标对象
      private IUserDao target
      public UserDaoProxy(IUserDao target){
          this.target = target;
      }
      
      public void save(){
          syso("--开始事务--");
          target.save();
          syso("--提交事务--");
      }
  }
  
  //测试类
  public class App{
      main(){
          //目标对象
          UserDao target = new UserDao();
          //代理对象
          UserDaoProxy proxy = new UserDaoProxy(target);
          
          proxy.save();//执行的是代理方法
      }
  }
  总结：（1）可以做到在不修改目标对象的功能的前提下对目标功能扩展
       （2）缺点：因为代理对象和目标对象实现同样的接口，所以会有很多很多代理类，一旦接口增加方法，目标对象与代理对象都需要维护
   
   
   （2）动态代理：代理对象不需要接口，代理对象的生成是利用JDK的API，动态的在内存中构建代理对象（需要指定创建代理对象/目标对象实现的接口的类型）
        JDK中生成代理对象的API在java.lang.reflect.Proxy包中，JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接受三个参数
        static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)
        ClassLoader loader:类加载器
        Class<?>[] interfaces, 目标对象实现的接口类型，使用泛型方式确认类型
        InvocationHandler h: 事件处理、执行目标对象的方法时，会触发事件处理器的方法，会把当前执行目标对象的方法作为参数传入
        
  示例：
  //代理工厂类
  public class ProxyFactory{
      //维护一个目标对象
      private Object target;
      public ProxyFactory(Object target){
          this.target = target;
      }
      
      //给目标对象生成代理对象
      public Object getProxyInstance(){
           return Proxy.newProxyInstance(
                target.getClass().getClassLoader(),
                target.getClass().getInterface(),
                new InvocationHandler(){
                    @Override
                    public Object invoke(Object proxy, Method metho, Object[] args) throws Throwable{
                         syso("开始事务");
                         //执行目标对象方法
                         Object returnValue = method.invoke(target, args);
                         syso("提交事务");
                         return returnValue;
                    }
                }
           )     
      }
  }
     //测试类
     public class App {
    public static void main(String[] args) {
        // 目标对象
        IUserDao target = new UserDao();
        // 【原始的类型 class cn.itcast.b_dynamic.UserDao】
        System.out.println(target.getClass());

        // 给目标对象，创建代理对象
        IUserDao proxy = (IUserDao) new ProxyFactory(target).getProxyInstance();
        // class $Proxy0   内存中动态生成的代理对象
        System.out.println(proxy.getClass());

        // 执行方法   【代理对象】
        proxy.save();
    }
}

   （3）Cglib代理：静态代理和动态代理都要求目标对象是实现一个接口的目标对象，但是有时候目标对象只有一个单独的对象，并没有实现任何的接口，这个时候可以使用
以目标对象子类的方式实现代理，这就叫Cglib代理，是通过在内存中构建一个子类对象从而实现对目标对象功能的扩展。
实现方法：（1）需要引入cglib的jar包，但是spring的核心包中已经包括了Cglib功能，所以直接引入spring-core-3.2.5.jar即可
         （2）在内存中动态构建子类
         （3）代理的类不能为final，否则报错
         （4）目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法

示例：
//目标对象,没有实现任何接口
public calss UserDao{
    public void save(){
        syso(.........);
    }
}
//Cglib代理工厂
public class ProxyFactory implements MethodInterceptor{
      //维护目标对象
      private Object target;
      
      public ProxyFactory(Object target){
          this.target = target;
      }
      
      //给目标对象创建一个代理对象
      public Object getProxyInstance(){
            //1.工具类
            Enhancer en = new Enhancer();
            //2.设置父类
            en.setSuperclass(target.getClass());
            //3.设置回调函数
            en.setCallback(this);
            //4.创建子类（代理对象）
            return en.create();
      }
      @Override
      public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable{
          syso("开始执行事务");
          //执行目标对象的方法
          Object returnValue = method.invoke(target, args);
          syso("提交事务");
          return returnValue();
      }
}
/**
 * 测试类
 */
public class App {

    @Test
    public void test(){
        //目标对象
        UserDao target = new UserDao();

        //代理对象
        UserDao proxy = (UserDao)new ProxyFactory(target).getProxyInstance();

        //执行代理对象的方法
        proxy.save();
    }
}


